# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: mon-app-deployment
# spec:
#   replicas: 3  # Vous pouvez ajuster le nombre de répliques selon vos besoins.
#   selector:
#     matchLabels:
#       app: mon-app
#   template:
#     metadata:
#       labels:
#         app: mon-app
#     spec:
#       containers:
#         - name: mon-app-container
#           image: gcr.io/exalted-airfoil-402614/joffreyb/imagepythontp3-gitlabci:v1.0  # Remplacez ceci par le chemin de votre image GCR.
#           ports:
#             - containerPort: 8080  # Port sur lequel votre application écoute.
#           env:
#             - name: ENV
#               value: "prod"
#           resources:
#             requests:
#               memory: "64Mi"
#               cpu: "250m"
#             limits:
#               memory: "128Mi"
#               cpu: "500m"

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: mon-app-service
# spec:
#   selector:
#     app: mon-app
#   ports:
#     - protocol: TCP
#       port: 80
#       targetPort: 8080
#   type: LoadBalancer

# ---
# apiVersion: "apps/v1"
# kind: "Deployment"
# metadata:
#   name: "my-app"
#   namespace: "default"
#   labels:
#     app: "my-app"
# spec:
#   replicas: 3
#   selector:
#     matchLabels:
#       app: "my-app"
#   template:
#     metadata:
#       labels:
#         app: "my-app"
#     spec:
#       containers:
#       - name: "imagepythontp3-gitlabci-1"
#         image: "gcr.io/exalted-airfoil-402614/joffreyb/imagepythontp3-gitlabci:v1.0"
#         resources:
#           requests:
#             memory: "64Mi"
#             cpu: "250m"
#           limits:
#             memory: "128Mi"
#             cpu: "500m"
# ---
# apiVersion: "autoscaling/v2beta1"
# kind: "HorizontalPodAutoscaler"
# metadata:
#   name: "my-app-hpa-yydz"
#   namespace: "default"
#   labels:
#     app: "my-app"
# spec:
#   scaleTargetRef:
#     kind: "Deployment"
#     name: "my-app"
#     apiVersion: "apps/v1"
#   minReplicas: 1
#   maxReplicas: 5
#   metrics:
#   - type: "Resource"
#     resource:
#       name: "cpu"
#       targetAverageUtilization: 80

# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: nginx-deployment
# spec:
#   replicas: 3
#   selector:
#     matchLabels:
#       app: nginx
#   template:
#     metadata:
#       labels:
#         app: nginx
#     spec:
#       containers:
#         - name: nginx
#           image: nginx:latest
#           ports:
#             - containerPort: 80
#           resources:
#             requests:
#               memory: "64Mi"
#               cpu: "250m"
#             limits:
#               memory: "128Mi"
#               cpu: "500m"
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: nginx-service
# spec:
#   selector:
#     app: nginx
#   ports:
#     - protocol: TCP
#       port: 80
#       targetPort: 80
#   type: LoadBalancer

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
spec:
  replicas: 3
  serviceName: elasticsearch
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:8.0.0
          resources:
            limits:
              memory: 2Gi
              cpu: 1000m
            requests:
              cpu: 1000m
              memory: 2Gi
          ports:
            - containerPort: 9200
            - containerPort: 9300
          volumeMounts:
            - name: elasticsearch-data
              mountPath: /usr/share/elasticsearch/data
  volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
spec:
  selector:
    app: elasticsearch
  ports:
    - name: http
      port: 9200
      targetPort: 9200
    - name: transport
      port: 9300
      targetPort: 9300
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
        - name: logstash
          image: docker.elastic.co/logstash/logstash:8.0.0
          ports:
            - containerPort: 5044
          volumeMounts:
            - name: logstash-config
              mountPath: /usr/share/logstash/config
          resources:
            limits:
              memory: 1Gi
              cpu: 500m
            requests:
              memory: 1Gi
              cpu: 500m
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
data:
  logstash.conf: |
    input {
      beats {
        port => 5044
      }
    }
    output {
      elasticsearch {
        hosts => ["http://elasticsearch:9200"]
        index => "logs-%{+YYYY.MM.dd}"
      }
    }

---
apiVersion: v1
kind: Service
metadata:
  name: logstash
spec:
  selector:
    app: logstash
  ports:
    - name: logstash
      port: 5044
      targetPort: 5044

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
        - name: kibana
          image: docker.elastic.co/kibana/kibana:8.0.0
          ports:
            - containerPort: 5601
          resources:
            limits:
              memory: 1Gi
              cpu: 500m
            requests:
              memory: 500Mi
              cpu: 250m
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
spec:
  selector:
    app: kibana
  ports:
    - name: http
      port: 5601
      targetPort: 5601
  type: LoadBalancer
